----------------------------------------
File: game.py

import random

def afficher_etats(etat_j1, etat_j2):
    def formater(etat):
        return "[" + ", ".join(str(x) if x is not None else " " for x in etat) + "]"

    print(f"Joueur 1 : {formater(etat_j1)}")
    print(f"Joueur 2 : {formater(etat_j2)}")

def placer_nombre_interface(joueur, etat_j1, etat_j2, nb):
    while True:
        print(f"\nTour {sum(x is not None for x in etat_j1 + etat_j2) + 1} - Nombre tiré pour Joueur {joueur} : {nb}")
        print("État du jeu :")
        afficher_etats(etat_j1, etat_j2)

        try:
            case = int(input(f"Joueur {joueur}, choisissez une case (1-3) vide : ")) - 1
            if 0 <= case < 3 and (etat_j1 if joueur == 1 else etat_j2)[case] is None:
                return case
            else:
                print("Case invalide ou déjà occupée.")
        except ValueError:
            print("Entrée invalide.")

def determiner_score(etat):
    return int("".join(str(x) for x in etat))

def partie_joueur_contre_joueur():
    etat_j1 = [None] * 3
    etat_j2 = [None] * 3
    for tour in range(3):
        nb1 = random.randint(0, 9)
        c1 = placer_nombre_interface(1, etat_j1, etat_j2, nb1)
        etat_j1[c1] = nb1

        nb2 = random.randint(0, 9)
        c2 = placer_nombre_interface(2, etat_j1, etat_j2, nb2)
        etat_j2[c2] = nb2

    afficher_etats(etat_j1, etat_j2)
    s1 = determiner_score(etat_j1)
    s2 = determiner_score(etat_j2)
    print(f"\nRésultat : Joueur 1 = {s1}, Joueur 2 = {s2}")
    if s1 > s2:
        print("Joueur 1 gagne !")
        return 1
    elif s2 > s1:
        print("Joueur 2 gagne !")
        return 2
    else:
        print("Égalité !")
        return 0

def partie_joueur_contre_ia(ia):
    etat_j1 = [None] * 3
    etat_j2 = [None] * 3
    for tour in range(3):
        nb1 = random.randint(0, 9)
        c1 = placer_nombre_interface(1, etat_j1, etat_j2, nb1)
        etat_j1[c1] = nb1

        nb2 = random.randint(0, 9)
        c2 = ia(nb2, etat_j2[:], etat_j1[:])
        if c2 not in [1, 2, 3]:
            raise ValueError(f"L'IA a retourné une case invalide : {c2}")
        if etat_j2[c2 - 1] is not None:
            raise ValueError(f"L'IA a tenté de jouer dans une case occupée : {c2}")
        etat_j2[c2 - 1] = nb2

        print(f"\nTour {tour + 1} - Nombre tiré pour IA : {nb2}")
        afficher_etats(etat_j1, etat_j2)

    s1 = determiner_score(etat_j1)
    s2 = determiner_score(etat_j2)
    print(f"\nRésultat : Joueur = {s1}, IA = {s2}")
    if s1 > s2:
        print("Vous gagnez !")
        return 1
    elif s2 > s1:
        print("L'IA gagne !")
        return 2
    else:
        print("Égalité !")
        return 0

def partie_ia_contre_ia(ia1, ia2, afficher=True):
    etat_j1 = [None] * 3
    etat_j2 = [None] * 3
    for tour in range(3):
        nb1 = random.randint(0, 9)
        case1 = ia1(nb1, etat_j1[:], etat_j2[:])
        if case1 not in [1, 2, 3]:
            raise ValueError(f"IA1 a retourné une case invalide : {case1}")
        if etat_j1[case1 - 1] is not None:
            raise ValueError(f"IA1 a joué dans une case occupée : {case1}")
        etat_j1[case1 - 1] = nb1

        nb2 = random.randint(0, 9)
        case2 = ia2(nb2, etat_j2[:], etat_j1[:])
        if case2 not in [1, 2, 3]:
            raise ValueError(f"IA2 a retourné une case invalide : {case2}")
        if etat_j2[case2 - 1] is not None:
            raise ValueError(f"IA2 a joué dans une case occupée : {case2}")
        etat_j2[case2 - 1] = nb2

        if afficher:
            print(f"\nTour {tour + 1}")
            print(f"IA1 a reçu : {nb1}")
            print(f"IA2 a reçu : {nb2}")
            afficher_etats(etat_j1, etat_j2)

    score1 = determiner_score(etat_j1)
    score2 = determiner_score(etat_j2)

    if score1 > score2:
        return 1
    elif score2 > score1:
        return 2
    else:
        return 0


----------------------------------------
File: main.py

from game import partie_joueur_contre_joueur, partie_joueur_contre_ia, partie_ia_contre_ia
from ia import lister_ias
import sys

def menu():
    while True:
        print("\n=== MENU PRINCIPAL ===")
        print("1. Joueur contre joueur")
        print("2. Joueur contre machine")
        print("3. Tournoi de machines (IA vs IA)")
        print("4. Quitter")
        choix = input("Choisissez une option : ")

        if choix == "1":
            partie_joueur_contre_joueur()
        elif choix == "2":
            ia_disponibles = lister_ias()
            print("\n=== Sélection de l'IA ===")
            for i, nom in enumerate(ia_disponibles):
                print(f"{i + 1}. {nom}")
            choix_ia = int(input("Choix : ")) - 1
            if 0 <= choix_ia < len(ia_disponibles):
                partie_joueur_contre_ia(ia_disponibles[choix_ia])
            else:
                print("Choix invalide.")
        elif choix == "3":
            ia_disponibles = lister_ias()
            print("\n=== Sélection de la première IA ===")
            for i, nom in enumerate(ia_disponibles):
                print(f"{i + 1}. {nom}")
            choix_ia1 = int(input("Choix : ")) - 1
            print("\n=== Sélection de la deuxième IA ===")
            for i, nom in enumerate(ia_disponibles):
                print(f"{i + 1}. {nom}")
            choix_ia2 = int(input("Choix : ")) - 1
            nb_matchs = int(input("Nombre de matchs à simuler : "))
            if 0 <= choix_ia1 < len(ia_disponibles) and 0 <= choix_ia2 < len(ia_disponibles):
                ia1 = ia_disponibles[choix_ia1]
                ia2 = ia_disponibles[choix_ia2]
                gagnant = partie_ia_contre_ia(ia1, ia2, nb_matchs, afficher=False)
            else:
                print("Choix invalide.")
        elif choix == "4":
            print("Au revoir !")
            sys.exit(0)
        else:
            print("Choix invalide.")

if __name__ == "__main__":
    menu()


----------------------------------------
File: ia\RANDOM.py

import random

def ia(chiffre, cases_perso, cases_adversaire):
    libres = [i for i, v in enumerate(cases_perso) if v is None]
    return random.choice(libres)


----------------------------------------
File: ia\REACTIVE.py

def ia(chiffre, cases_perso, cases_adversaire):
    # Essaie de placer le plus grand chiffre en tête
    libres = [i for i, v in enumerate(cases_perso) if v is None]
    if chiffre >= 7 and 0 in libres:
        return 0
    elif chiffre <= 3 and 2 in libres:
        return 2
    elif 1 in libres:
        return 1
    return libres[0]


----------------------------------------
File: ia\SMARTY.py

def choisir_case(chiffre, placement_ia, placement_adv):
    # Classement des indices de position selon l’importance (centaines > dizaines > unités)
    priorite = [0, 1, 2]

    # Stratégie basique : chiffre élevé -> placer à gauche
    if chiffre >= 7:
        if placement_ia[0] is None:
            return 1
    elif chiffre >= 4:
        if placement_ia[1] is None:
            return 2
    else:
        if placement_ia[2] is None:
            return 3

    # Adaptation : si l’adversaire a placé un gros chiffre en début,
    # essayer de le battre à cette position
    for i in range(3):
        if placement_ia[i] is None and placement_adv[i] is not None:
            if chiffre > placement_adv[i]:
                return i + 1

    # Sinon, remplir la première case vide
    for i in priorite:
        if placement_ia[i] is None:
            return i + 1

    # Sécurité
    return 1

ia = choisir_case


----------------------------------------
File: ia\__init__.py

import os
import importlib

def lister_ias():
    return [
        f[:-3] for f in os.listdir(os.path.dirname(__file__))
        if f.endswith(".py") and f not in ["__init__.py"]
    ]

def charger_ia(nom):
    module = importlib.import_module(f"ia.{nom}")
    return module.ia


